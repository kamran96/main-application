# This is a basic workflow to help you get started with Actions

name: users-service

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    paths:
      - 'apps/users-service'
      - ".github/workflows/users-service.yaml"


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: cache node_modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-node-modules-cache-${{ hashFiles('**/yarn.lock') }}

      - name: install dependencies
        if: steps.cache-node-modules.cache-hit != 'true'
        run: yarn install --prefer-offline

      
      # INSTALL digital ocean cli
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_ACCESS_TOKEN }}

      # Runs a set of commands using the runners shell
      - name: build required projects
        run: NODE_ENV='production' yarn build users-service
      
      # docker build item service images
      - name: Build container image
        run: docker build -f $GITHUB_WORKSPACE/apps/users-service/Dockerfile -t registry.digitalocean.com/invyce-images/users-service:$(echo $GITHUB_SHA | head -c7) .

      #login to digitalocean for 1200 seconds
      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200
     
      # push image to registry
      - name: Push service image to DigitalOcean Container Registry
        run: docker push registry.digitalocean.com/invyce-images/users-service:$(echo $GITHUB_SHA | head -c7)

      - name: Update deployment file
        run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i 's|<IMAGE>|registry.digitalocean.com/invyce-images/users-service:'${TAG}'|' $GITHUB_WORKSPACE/apps/users-service/src/main.ts

      # Install yq
      - name: Install yq 
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.12.0/yq_linux_amd64 -O /usr/bin/yq && chmod +x /usr/bin/yq
          yq --version

       # Clone git repository with Helm charts, update and push changes
      - name: Update image tag in Helm git repo 
        run: | 
          CONTAINER_IMAGE_TAG="$(echo $GITHUB_SHA | head -c7)"
          echo New container image tag: $CONTAINER_IMAGE_TAG
          echo Create temporary folder to clone the repo into...
          TEMP_FOLDER="$(mktemp -d)" 
          echo Clone the repository...
          git clone -b main "https://zeeshooo:${ACCESS_TOKEN}@github.com/invyce/invyce-ops.git" ${TEMP_FOLDER} 
          cd ${TEMP_FOLDER}/users 
          ls
          echo Update Helm chart values-dev with new image tag
          CONTAINER_IMAGE_TAG=$CONTAINER_IMAGE_TAG yq e -i '.image.tag = env(CONTAINER_IMAGE_TAG)' ./values.yaml
          echo 'Container image tag updated in users/values.yaml'
          cd ../
          git config user.email "zeeshan@invyce.com"
          git config user.name "zeeshooo" 
          git add .  
          git commit -m "refactor - updated Helm chart values for dev environment with container image - $CONTAINER_IMAGE_TAG" 
          git push -u origin main

      # - name: Save DigitalOcean kubeconfig with short-lived credentials
      #   run: doctl kubernetes cluster kubeconfig save --expiry-seconds 1200 k8s-invyce-app-stg

      # - name: Deploy to DigitalOcean Kubernetes
      #   run: kubectl apply -f $GITHUB_WORKSPACE/apps/users-service/ops/users-deployment.yaml

